exports.index = {
    json: function (req, res) {
        var page = _.has(req.query, 'page') ? parseInt(req.query.page) : 1;
        var rows = _.has(req.query, 'rows') ? parseInt(req.query.rows) : 10;
        if (!_.has(req.query, 'idCustomer') || !_.has(req.query, 'type') || (['chat', 'mail'].indexOf(req.query.type) < 0)) return res.json({ code: 404, message: 'Not found !' });
        var _query = _.cleanRequest(req.query, ['type', 'detail']);
        _query.idCustomer = new mongodb.ObjectId(_query.idCustomer);
        if (_.has(req.query, '_id') && _.has(req.query._id, '$ne')) req.query._id['$ne'] = new mongodb.ObjectId(req.query._id['$ne']);
        if (_.has(req.query, 'detail')) {
            _query._id = new mongodb.ObjectId(_query._id);
            global['_' + _.classify('tickets-' + req.query.type)].aggregate([
                { $match: _query },
                { $lookup: { from: 'ticketreasoncategories', localField: 'ticketReasonCategory', foreignField: '_id', as: 'ticketReasonCategory' } },
                { $unwind: { path: '$ticketReasonCategory', preserveNullAndEmptyArrays: true } },
                { $lookup: { from: 'ticketreasons', localField: 'ticketReason', foreignField: '_id', as: 'ticketReason' } },
                { $unwind: { path: '$ticketReason', preserveNullAndEmptyArrays: true } },
                { $lookup: { from: 'ticketsubreasons', localField: 'ticketSubreason', foreignField: '_id', as: 'ticketSubreason' } },
                { $unwind: { path: '$ticketSubreason', preserveNullAndEmptyArrays: true } },
            ], function (err, ticket) {
                res.json({ code: err ? 500 : 200, message: err ? err : null, ticket: ticket.length ? ticket[0] : [] });
            });
        }
        else {
            if (_.has(_query, 'deadline')) _query.deadline = { $gte: _moment(_query.deadline, 'DD/MM/YYYY').startOf('day')._d, $lte: _moment(_query.deadline, 'DD/MM/YYYY').endOf('day')._d, };
            if (_.has(_query, 'updated')) _query.updated = { $gte: _moment(_query.updated, 'DD/MM/YYYY').startOf('day')._d, $lte: _moment(_query.updated, 'DD/MM/YYYY').endOf('day')._d, };
            if (_.has(_query, 'ticketReasonCategory')) _query.ticketReasonCategory = new mongodb.ObjectId(_query.ticketReasonCategory);
            if (_.has(_query, 'ticketReason')) _query.ticketReasonCategory = new mongodb.ObjectId(_query.ticketReason);
            if (_.has(_query, 'ticketSubreason')) _query.ticketSubreason = new mongodb.ObjectId(_query.ticketSubreason);

            var _agg = global['_' + _.classify('tickets-' + req.query.type)].aggregate();
            _agg._pipeline = [
                { $match: _query },
                { $lookup: { from: 'ticketreasoncategories', localField: 'ticketReasonCategory', foreignField: '_id', as: 'ticketReasonCategory' } },
                { $unwind: { path: '$ticketReasonCategory', preserveNullAndEmptyArrays: true } },
                { $lookup: { from: 'ticketreasons', localField: 'ticketReason', foreignField: '_id', as: 'ticketReason' } },
                { $unwind: { path: '$ticketReason', preserveNullAndEmptyArrays: true } },
                { $lookup: { from: 'ticketsubreasons', localField: 'ticketSubreason', foreignField: '_id', as: 'ticketSubreason' } },
                { $unwind: { path: '$ticketSubreason', preserveNullAndEmptyArrays: true } },
                { $lookup: { from: 'users', localField: 'updateBy', foreignField: '_id', as: 'updateBy' } },
                { $unwind: { path: '$updateBy', preserveNullAndEmptyArrays: true } }
            ];

            console.dir(_agg._pipeline, { depth: null });

            global['_' + _.classify('tickets-' + req.query.type)].aggregatePaginate(_agg, { page: page, limit: 100 }, function (err, ticket, pageCount, count) {
                var paginator = new pagination.SearchPaginator({
                    prelink: '/ticket',
                    current: page,
                    rowsPerPage: rows,
                    totalResult: count
                });
                res.json({ code: err ? 500 : 200, message: err ? err : null, ticket: ticket, paging: paginator.getPaginationData() });
            });
        }
    },
    html: function (req, res) {
        delete req.query['dialogId'];
        if (!_.has(req.query, 'type') || (['chat', 'mail'].indexOf(req.query.type) < 0) || !_.has(req.query, 'service') || !_.has(req.session, 'user') || _.isUndefined(req.session.user._id)) {
            res.render('404', { title: '404 | Page not found' });
        }
        else {
            var _type = req.query.type;
            delete req.query.type;
            var _comanyId = '';
            var _agent = req.session.user._id;
            var _ticketId = _.has(req.query, 'ticketId') ? req.query.ticketId : '';
            var _mailId = _.has(req.query, 'mailId') ? req.query.mailId : null;
            var _Modal = global['_' + _.classify('tickets-' + _type)];

            var _T = {
                "chat": {
                    c: { idService: req.query.service, idAgent: req.session.user._id, threadId: _.has(req.query, 'threadId') ? req.query.threadId : null, status: -1 },
                    p: { path: 'idService', populate: { path: 'idChannel', model: _CompanyChannel } }
                },
                "mail": {
                    c: { idService: req.query.service, idAgent: req.session.user._id, mailId: _.has(req.query, 'mailId') ? req.query.mailId : null, status: 0 },
                    p: { path: 'idService', populate: { path: 'idCompany', model: _Company } }
                }
            };
			log.debug(_ticketId);
            _async.waterfall([
                function (next) {
                    if (_ticketId) {
                        _Modal.findById(_ticketId, function (error, ticket) {
                        	log.debug(error, ticket);
                            if (error) return next(error);
                            _Modal.populate(ticket, _T[_type].p, next);
                        });
                    } else {
                        _Modal.findOne({ mailId: req.query['mailId'] }).sort({ updated: -1, created: -1 }).exec(function (error, ticket) {
                        	log.debug(error, ticket);
                            if (error) return next(error);
                            if (ticket) return _Modal.populate(ticket, _T[_type].p, next);
                            _Modal.create(_T[_type].c, function (error, ticket) {
                                if (error) return next(error);
                                _Modal.populate(ticket, _T[_type].p, next);
                            });
                        });
                    }
                },
                function (ticket, next) {
                    switch (_type) {
                        case 'chat':
                            if (_.has(ticket, 'idService') || _.isNull(ticket.idService)) return next({ message: "Not have service !" });
                            _comanyId = ticket.idService.idChannel.idCompany;
                            break;
                        case 'mail':
                            if (_.has(ticket, 'idService') || _.isNull(ticket.idService)) return next({ message: "Not have service !" });
                            _comanyId = ticket.idService.idCompany._id;
                            break;
                    }
                    _async.parallel({
                        CustomerId: function (callback) {
                            var _idCustomer = !_.isNull(ticket.idCustomer) ? ticket.idCustomer : (_.has(req.query, 'CustomerId') ? (mongodb.ObjectId(req.query.CustomerId) || null) : null);
                            if (!_.isNull(_idCustomer)) return callback(null, _idCustomer);
                            if (_.has(req.query, 'field_e_mail')) {
                                _CCKFields['field_e_mail'].db.findOne({ value: req.query['field_e_mail'].toLowerCase() }, function (error, email) {
                                    if (!error && !_.isNull(email)) {
                                        callback(null, email.entityId);
                                    } else {
                                        callback(error, null);
                                    }
                                });
                            }
                            else {
                                // 09-11-2016: Cuongnm 
                                //callback(null, null);
                                if (_.has(req.query, 'field_so_dien_thoai')) {
                                    _CCKFields['field_so_dien_thoai'].db.findOne({ value: req.query['field_so_dien_thoai'] }, function (error, phone) {
                                        if (!error && !_.isNull(phone)) {
                                            callback(null, phone.entityId);
                                        } else {
                                            callback(error, null);
                                        }
                                    });
                                }
                                else {
                                    callback(null, null);
                                }
                            }
                        },
                        TicketId: function (callback) {
                            _ticketId = ticket._id;
                            callback(null, ticket);
                        },
                        ReasonCategoy: function (callback) {
                            _TicketReasonCategory.aggregate([
                                { $match: { category: _.switch(_type, ['chat', 'mail'], [3, 4]) } },
                                { $project: { _id: 1, name: 1 } },
                                { $lookup: { from: 'ticketreasons', localField: '_id', foreignField: 'idCategory', as: 'Reason' } },
                                { $unwind: { path: '$Reason', preserveNullAndEmptyArrays: true } },
                                { $sort: { 'Reason.priority': 1 } },
                                { $lookup: { from: 'ticketsubreasons', localField: 'Reason._id', foreignField: 'idReason', as: 'Reason.subReason' } },
                                { $group: { _id: '$_id', name: { $first: '$name' }, Reason: { $push: { _id: '$Reason._id', name: '$Reason.name', subReason: '$Reason.subReason' } } } },
                                { $project: { _id: 1, name: 1, Reason: { _id: 1, name: 1, subReason: { _id: 1, name: 1, priority: 1 } } } }
                            ], callback);
                        },
                        AgentGroup: function (callback) {
                            _Company.aggregate([
                                { $match: { _id: _comanyId } },
                                { $lookup: { from: 'agentgroups', localField: '_id', foreignField: 'idParent', as: 'agentgroups' } },
                                { $unwind: { path: '$agentgroups', preserveNullAndEmptyArrays: true } },
                                { $lookup: { from: 'users', localField: 'agentgroups._id', foreignField: 'agentGroupMembers.group', as: 'agentgroups.members' } },
                                { $lookup: { from: 'users', localField: 'agentgroups._id', foreignField: 'agentGroupLeaders.group', as: 'agentgroups.leaders' } },
                                { $project: { 'agentgroups._id': 1, 'agentgroups.name': 1, 'agentgroups.members._id': 1, 'agentgroups.members.name': 1, 'agentgroups.members.displayName': 1, 'agentgroups.leaders._id': 1, 'agentgroups.leaders.name': 1, 'agentgroups.leaders.displayName': 1 } }
                            ], callback);
                            //TODO : chua su ly loc user
                        },
                        Fields: function (callback) {
                            _Company.findById(_comanyId).populate({
                                path: 'companyProfile', model: _CompanyProfile, select: 'fieldId -_id',
                                populate: { path: 'fieldId', model: _CustomerFields, select: 'displayName modalName status isRequired fieldValue fieldType weight -_id', options: { sort: { weight: 1, displayName: 1 } } }
                            }).exec(callback);
                        }
                    }, next);
                }
            ], function (error, result) {
                if (_.has(result, 'CustomerId') && !_.isNull(result.CustomerId)) {
                    var _query = [];
                    _.each(result.Fields.companyProfile.fieldId, function (o) {
                        _query.push({ $lookup: { from: o.modalName, localField: '_id', foreignField: 'entityId', as: o.modalName } });
                    });
                    _Customer.aggregate([{ $match: { _id: result.CustomerId } }].concat(_query), function (error, customers) {
                        _.render(req, res, 'layout/ticket', _.extend(result, { fnInfo: dynamicCustomerInfo, customer: customers[0], 'custom-view': true }), true, error);
                    });
                } else {
                    return _.render(req, res, 'layout/ticket', _.extend(result, { fnInfo: dynamicCustomerInfo, customer: {}, 'custom-view': true }), true, error);
                }
            });
        }
    }
};

exports.update = function (req, res) {

    if (!_.has(req.body, 'type') || (['chat', 'mail'].indexOf(req.body.type) < 0)) return res.json({ code: 404, message: 'Not found !' });
    if (_.has(req.body, 'groupId') || (_.has(req.body, 'idAgent') && !_.isEqual(req.body.idAgent, req.session.user._id))) req.body.assignBy = req.session.user._id;
    if (!_.has(req.body, 'groupId') && _.isEmpty(req.body.idAgent)) req.body.idAgent = req.session.user._id;
    req.body.deadline = (_.has(req.body, 'deadline') && !_.isEmpty(req.body.deadline)) ? _moment(req.body.deadline, 'DD/MM/YYYY HH:mm')._d : null;
    req.body.updateBy = req.session.user._id;
    req.body.updated = _moment()._d;
    req.body.idAgent = req.session.user._id;
    _async.waterfall([
        function (next) {
            // if (!_.isEqual(req.body.type, "mail")) return next(null, req.body);
            // _TicketsMail.findOne({_id: req.params.ticket}).populate({path: "idService", model: _ServicesMail, select: 'sla'}).exec(function (error, m) {
            //     if (error || !m) return next(null, req.body);
            //     req.body["missed"] = _moment().diff(_moment(m.created), 'milisecond') > m.idService.sla;
            //     next(null, req.body);
            // });
            if (_.isEqual(req.body.type, "mail")) {
                _TicketsMail.findOne({ _id: req.params.ticket }).populate({ path: "idService", model: _ServicesMail, select: 'sla' }).exec(function (error, m) {
                    if (error || !m) return next(null, req.body);
                    req.body["missed"] = _moment().diff(_moment(m.created), 'milisecond') > m.idService.sla;
                    next(null, req.body);
                });
            }
            else if (_.isEqual(req.body.type, "chat")) {
                _TicketsChat.findOne({ _id: req.params.ticket }).exec(function (error, m) {
                    if (error || !m) return next(null, req.body);

                    if (req.body.idAgent == "")
                        req.body.idAgent = m.idAgent;

                    next(null, req.body);
                });
            }
            else {
                return next(null, req.body);
            }

        },
        function (body, next) {
            log.debug(JSON.stringify(body));

            if (_.isEqual(req.body.type, "chat")) {
                if (body['status'] != 2) return next(null, null, body);
                _TicketsChat.findOne({ _id: req.params.ticket })
                    //    .populate('idService','idChannel')
                    //    .populate('idService.idChannel','idCompany')

                    .populate({
                        path: 'idService',
                        select: 'idChannel',
                        populate: {
                            path: 'idChannel',
                            model: 'CompanyChannel',
                            select: 'idCompany'
                        }
                    })
                    .exec(function (err, ticket) {
                        //log.debug(err, ticket);
                        //log.debug("BO da o day");
                        next(null, ticket, body);
                    });
            }
            else {
                if (body['status'] != 2) return next(null, null, body);
                _TicketsMail.findOne({
                    _id: req.params.ticket
                })
                    .populate({ path: 'idService', select: 'idCompany' })
                    .exec(function (err, ticket) {
                        next(null, ticket, body);
                    });
                log.debug("DECH");
            }
        },
        function (oldTicket, body, next) {
            log.debug(JSON.stringify(oldTicket));
            log.debug(JSON.stringify(body));

            if (_.isEqual(req.body.type, "chat")) {
                if (oldTicket == null || oldTicket.status == 2) return next(null, body);

                _WorkLog.create({
                    idAgent: body.idAgent,
                    idTicket: req.params.ticket,
                    idCompany: oldTicket.idCampain ? oldTicket.idCampain.idCompany : (oldTicket.idService ? oldTicket.idService.idChannel.idCompany : null),
                    createTime: oldTicket.created,
                    completeTime: new Date(),
                    processTime: new Date() - oldTicket.created,
                    type: 2
                }, function (err, worklog) {
                    log.debug(err, worklog);
                    if (err) log.error(JSON.stringify(err));
                    next(null, body);
                })
            }
            else if (_.isEqual(req.body.type, "mail")) {
                if (oldTicket == null || oldTicket.status == 2) return next(null, body);

                _WorkLog.create({
                    idAgent: body.idAgent,
                    idTicket: req.params.ticket,
                    createTime: oldTicket.created,
                    completeTime: new Date(),
                    idCompany: oldTicket.idService ? oldTicket.idService.idCompany : null,
                    processTime: new Date() - oldTicket.created,
                    type: 3
                }, function (err, worklog) {
                    log.debug(err, worklog);
                    if (err) log.error(JSON.stringify(err));
                    next(null, body);
                })
            }
            else {
                next(null, body);
            }
        }
    ], function (error, body) {
        log.debug(JSON.stringify(body));
        var _body = _.chain(body).mapObject(function (val, key) {
            return _.isEqual(val, '') ? null : val;
        }).value();

        global['_' + _.classify('tickets-' + body.type)].findById(req.params.ticket, "-_id").lean().exec(function (err, doc) {
            if (err) return res.json({ code: 500, message: err, ticket: null });
            global['_' + _.classify('tickets-' + body.type)].count({ mailId: doc.mailId }, function (err, num) {
                if (err) return res.json({ code: 500, message: err, ticket: null });
                if (doc.status === 0 && num <= 1) {
                    global['_' + _.classify('tickets-' + body.type)].findByIdAndUpdate(req.params.ticket, _body, function (err, ticket) {
                        res.json({
                            code: err ? 500 : 200,
                            message: err ? err : 'Cập nhật thành công !',
                            ticket: ticket
                        });
                    });
                } else {
                    var _doc = JSON.parse(JSON.stringify(_.extend(doc, _.omit(_body, 'mailId'))));
                    global['_' + _.classify('tickets-' + body.type)].create(_doc, { new: true }, function (err, ticket) {
                        res.json({
                            code: err ? 500 : 200,
                            message: err ? err : 'Cập nhật thành công !',
                            ticket: ticket
                        });
                    });
                }
            });
        });
    });
};

function dynamicCustomerInfo(el, v) {
    var _tag = '';
    var _attr = {};
    var _sattr = [];
    var _childs = [];
    var _val = (v && _.has(v, el.modalName) && !_.isEmpty(v[el.modalName]) && !_.isNull(v[el.modalName]) && v[el.modalName].length && _.has(v[el.modalName][0], 'value')) ? v[el.modalName][0].value : '';

    switch (el.fieldType) {
        case 1:
        case 3:
            _tag = 'input';
            _attr = {
                value: _val,
                class: 'form-control' + _.switch(el.isRequired, [0, 1], ['', ' validate[required]']),
                type: 'text',
                id: 'edit_' + el.modalName,
                name: el.modalName
            }
            break;
        case 2:
            _tag = 'input';
            _attr = {
                value: _val,
                class: 'form-control' + _.switch(el.isRequired, [0, 1], ['', ' validate[required]']),
                type: 'number',
                id: 'edit_' + el.modalName,
                name: el.modalName
            }
            break;
        case 4:
            _sattr.push('multiple');
        case 5:
            _tag = 'select';
            _attr = {
                class: 'selectpicker' + _.switch(el.isRequired, [0, 1], ['', ' validate[required]']),
                id: 'edit_' + el.modalName,
                name: el.modalName
            };
            _childs.push({
                tag: 'option',
                attr: { value: '' },
                content: '---- Chọn ----'
            });
            _.each(el.fieldValue, function (ev) {
                _childs.push({
                    tag: 'option',
                    attr: { value: ev },
                    sattr: _val.indexOf(ev) >= 0 ? ['selected'] : [],
                    content: ev
                });
            });
            break;
        case 6:
            _tag = 'div';
            _attr = { class: 'input-group' };
            _childs = [
                {
                    tag: 'input',
                    attr: {
                        class: 'form-control date-picker' + _.switch(el.isRequired, [0, 1], ['', ' validate[required]']),
                        value: _moment(_val).format('DD/MM/YYYY'),
                        type: 'text',
                        id: 'edit_' + el.modalName,
                        name: el.modalName
                    }
                },
                {
                    tag: 'span',
                    attr: { class: 'input-group-addon p-l-10 bgm-gray c-white' },
                    childs: [{
                        tag: 'i',
                        attr: {
                            role: 'button',
                            class: 'zmdi zmdi-calendar'
                        }
                    }]
                }
            ];
            break;
        case 7:
            _tag = 'input';
            _attr = {
                value: _val,
                class: 'form-control validate[custom[number]' + _.switch(el.isRequired, [0, 1], ['', ',required'] + ']'),
                type: 'text',
                id: 'edit_' + el.modalName,
                name: el.modalName
            }
            break;
    }

    return _.htmlTags([{ tag: _tag, attr: _attr, sattr: _sattr, childs: _childs.length ? _childs : [] }]);
}
